[{"path":"http://ehrlinger.github.io/ggRandomForests/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 ggRandomForests authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Ehrlinger. Author, maintainer.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ehrlinger J (2025). ggRandomForests: Visually Exploring Random Forests. R package version 2.4.1, https://cran.r-project.org/package=ggRandomForests.","code":"@Manual{,   title = {ggRandomForests: Visually Exploring Random Forests},   author = {John Ehrlinger},   url = {https://cran.r-project.org/package=ggRandomForests},   note = {R package version 2.4.1},   date = {2020-04-26},   year = {2025}, }"},{"path":"http://ehrlinger.github.io/ggRandomForests/index.html","id":"ggrandomforests-visually-exploring-random-forests","dir":"","previous_headings":"","what":"Visually Exploring Random Forests","title":"Visually Exploring Random Forests","text":"ggRandomForests help uncover variable associations random forests models. package designed use randomForest package (. Liaw M. Wiener 2002) randomForestSRC package (Ishwaran et.al. 2014, 2008, 2007) survival, regression classification random forests uses ggplot2 package (Wickham 2009) plotting diagnostic variable association results. ggRandomForests structured extract data objects randomForestSRC randomForest objects provides S3 functions printing plotting objects. randomForestSRC package provides unified treatment Breiman’s (2001) random forests variety data settings. Regression classification forests grown response numeric categorical (factor) survival competing risk forests (Ishwaran et al. 2008, 2012) grown right-censored survival data. Recently, support randomForest package (. Liaw M. Wiener 2002) regression classification forests also added. Many figures created ggRandomForests package also available directly within randomForestSRC randomForest package. However, ggRandomForests offers following advantages: Separation data figures: ggRandomForests contains functions operate either forest object directly, output randomForestSRC randomForest post processing functions (.e. plot.variable, var.select, find.interaction) generate intermediate ggRandomForests data objects. S3 functions provide process objects plot results using ggplot2 graphics package. Alternatively, users can use data objects additional custom plotting analysis operations. data object/figure single, self contained object. allows simple modification manipulation data ggplot2 objects meet users specific needs requirements. use ggplot2 plotting. chose use ggplot2 package figures allow users flexibility modifying figures liking. S3 plot function returns either single ggplot2 object, list ggplot2 objects, allowing users use additional ggplot2 functions themes modify customize figures liking. package recently extended Breiman Cutler’s Random Forests Classification Regression package randomForest possible. Though methods provided gg_* functions, unsupported functions return error message indicating support still lacking.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Visually Exploring Random Forests","text":"Breiman, L. (2001). Random forests, Machine Learning, 45:5-32. Ishwaran H. Kogalur U.B. (2014). Random Forests Survival, Regression Classification (RF-SRC), R package version 1.5.5. Ishwaran H. Kogalur U.B. (2007). Random survival forests R. R News 7(2), 25–31. Ishwaran H., Kogalur U.B., Blackstone E.H. Lauer M.S. (2008). Random survival forests. Ann. Appl. Statist. 2(3), 841–860. . Liaw M. Wiener (2002). Classification Regression randomForest. R News 2(3), 18–22. Wickham, H. ggplot2: elegant graphics data analysis. Springer New York, 2009.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_auc.html","id":null,"dir":"Reference","previous_headings":"","what":"Area Under the ROC Curve calculator — calc_auc","title":"Area Under the ROC Curve calculator — calc_auc","text":"Area ROC Curve calculator","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area Under the ROC Curve calculator — calc_auc","text":"","code":"calc_auc(x)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area Under the ROC Curve calculator — calc_auc","text":"x gg_roc object","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_auc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area Under the ROC Curve calculator — calc_auc","text":"AUC. 50% random guessing, higher better.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_auc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Area Under the ROC Curve calculator — calc_auc","text":"calc_auc uses trapezoidal rule calculate area ROC curve. helper function gg_roc functions.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_auc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area Under the ROC Curve calculator — calc_auc","text":"","code":"## ## Taken from the gg_roc example rfsrc_iris <- rfsrc(Species ~ ., data = iris)  gg_dta <- gg_roc(rfsrc_iris, which_outcome = 1)  calc_auc(gg_dta) #> [1] 1  gg_dta <- gg_roc(rfsrc_iris, which_outcome = 2)  calc_auc(gg_dta) #> [1] 1  ## randomForest tests rf_iris <- randomForest::randomForest(Species ~ ., data = iris) gg_dta <- gg_roc(rfsrc_iris, which_outcome = 2)  calc_auc(gg_dta) #> [1] 1"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_roc.rfsrc.html","id":null,"dir":"Reference","previous_headings":"","what":"Receiver Operator Characteristic calculator — calc_roc.rfsrc","title":"Receiver Operator Characteristic calculator — calc_roc.rfsrc","text":"Receiver Operator Characteristic calculator","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_roc.rfsrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Receiver Operator Characteristic calculator — calc_roc.rfsrc","text":"","code":"# S3 method for class 'rfsrc' calc_roc(object, dta, which_outcome = \"all\", oob = TRUE, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_roc.rfsrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Receiver Operator Characteristic calculator — calc_roc.rfsrc","text":"object rfsrc predict.rfsrc object containing predicted response dta True response variable which_outcome defined, show ROC response. oob Use OOB estimates, normal validation method (TRUE) ... extra arguments passed helper functions","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_roc.rfsrc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Receiver Operator Characteristic calculator — calc_roc.rfsrc","text":"gg_roc object","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_roc.rfsrc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Receiver Operator Characteristic calculator — calc_roc.rfsrc","text":"randomForestSRC prediction actual response value, calculate specificity (1-False Positive Rate) sensitivity (True Positive Rate) predictor. helper function gg_roc functions, intended use end user.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/calc_roc.rfsrc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Receiver Operator Characteristic calculator — calc_roc.rfsrc","text":"","code":"## Taken from the gg_roc example rfsrc_iris <- rfsrc(Species ~ ., data = iris)  gg_dta <- calc_roc(rfsrc_iris, rfsrc_iris$yvar,   which_outcome = 1, oob = TRUE ) gg_dta <- calc_roc(rfsrc_iris, rfsrc_iris$yvar,   which_outcome = 1, oob = FALSE )  rf_iris <- randomForest(Species ~ ., data = iris) gg_dta <- calc_roc(rf_iris, rf_iris$yvar,   which_outcome = 1 ) #> Warning: number of rows of result is not a multiple of vector length (arg 2) gg_dta <- calc_roc(rf_iris, rf_iris$yvar,   which_outcome = 2 )"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/ggRandomForests-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggRandomForests: Visually Exploring Random Forests — ggRandomForests-package","title":"ggRandomForests: Visually Exploring Random Forests — ggRandomForests-package","text":"ggRandomForests utility package randomForestSRC (Ishwaran et.al. 2014, 2008, 2007) survival, regression classification forests uses ggplot2 (Wickham 2009) package plotting results. ggRandomForests structured extract data objects random forest provides S3 functions printing plotting objects. randomForestSRC package provides unified treatment Breiman's (2001) random forests variety data settings. Regression classification forests grown response numeric categorical (factor) survival competing risk forests (Ishwaran et al. 2008, 2012) grown right-censored survival data. Many figures created ggRandomForests package also available directly within randomForestSRC package. However, ggRandomForests offers following advantages: Separation data figures: ggRandomForest contains functions operate either rfsrc forest object directly, output randomForestSRC post processing functions (.e. plot.variable, find.interaction) generate intermediate ggRandomForests data objects. S3 functions provide process objects plot results using ggplot2 graphics package. Alternatively, users can use data objects additional custom plotting analysis operations. data object/figure single, self contained object. allows simple modification manipulation data ggplot2 objects meet users specific needs requirements. use ggplot2 plotting. chose use ggplot2 package figures allow users flexibility modifying figures liking. S3 plot function returns either single ggplot2 object, list ggplot2 objects, allowing users use additional ggplot2 functions themes modify customize figures liking. ggRandomForests package contains following data functions: gg_rfsrc: randomForest[SRC] predictions. gg_error: randomForest[SRC] convergence rate based OOB error rate. gg_roc: ROC curves randomForest classification models. gg_vimp: Variable Importance ranking variable selection. (Ishwaran et.al. 2010). gg_variable: Marginal variable dependence. gg_survival: Kaplan-Meier/Nelson-Aalen hazard analysis. data functions associated S3 plot function returns ggplot2 objects, either individually list, can customized using standard ggplot2 commands.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/ggRandomForests-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ggRandomForests: Visually Exploring Random Forests — ggRandomForests-package","text":"Breiman, L. (2001). Random forests, Machine Learning, 45:5-32. Ishwaran H. Kogalur U.B. (2014). Random Forests Survival, Regression Classification (RF-SRC), R package version 1.5.5.12. Ishwaran H. Kogalur U.B. (2007). Random survival forests R. R News 7(2), 25–31. Ishwaran H., Kogalur U.B., Blackstone E.H. Lauer M.S. (2008). Random survival forests. Ann. Appl. Statist. 2(3), 841–860. Ishwaran, H., U. B. Kogalur, E. Z. Gorodeski, . J. Minn, M. S. Lauer (2010). High-dimensional variable selection survival data. J. Amer. Statist. Assoc. 105, 205-217. Ishwaran, H. (2007). Variable importance binary regression trees forests. Electronic J. Statist., 1, 519-537. Wickham, H. ggplot2: elegant graphics data analysis. Springer New York, 2009.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_error.html","id":null,"dir":"Reference","previous_headings":"","what":"randomForest error rate data object — gg_error","title":"randomForest error rate data object — gg_error","text":"Extract cumulative (OOB) randomForestSRC error rate function number trees.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"randomForest error rate data object — gg_error","text":"","code":"gg_error(object, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"randomForest error rate data object — gg_error","text":"object rfsrc object. ... optional arguments (used).","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"randomForest error rate data object — gg_error","text":"gg_error data.frame one column indicating tree number, remaining columns rfsrc$err.rate return value.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"randomForest error rate data object — gg_error","text":"gg_error function simply returns rfsrc$err.rate object data.frame, assigns class connecting S3 plot.gg_error function.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_error.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"randomForest error rate data object — gg_error","text":"Breiman L. (2001). Random forests, Machine Learning, 45:5-32. Ishwaran H. Kogalur U.B. (2007). Random survival forests R, Rnews, 7(2):25-31. Ishwaran H. Kogalur U.B. (2013). Random Forests Survival, Regression Classification (RF-SRC), R package version 1.4.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"randomForest error rate data object — gg_error","text":"","code":"## Examples from RFSRC package... ## ------------------------------------------------------------ ## classification example ## ------------------------------------------------------------ ## ------------- iris data ## You can build a randomForest rfsrc_iris <- rfsrc(Species ~ ., data = iris, tree.err = TRUE)  # Get a data.frame containing error rates gg_dta <- gg_error(rfsrc_iris)  # Plot the gg_error object plot(gg_dta)   ## RandomForest example rf_iris <- randomForest::randomForest(Species ~ .,   data = iris,   tree.err = TRUE, ) gg_dta <- gg_error(rf_iris) plot(gg_dta)   gg_dta <- gg_error(rf_iris, training = TRUE) plot(gg_dta)  ## ------------------------------------------------------------ ## Regression example ## ------------------------------------------------------------  ## ------------- airq data rfsrc_airq <- rfsrc(Ozone ~ .,   data = airquality,   na.action = \"na.impute\", tree.err = TRUE, )  # Get a data.frame containing error rates gg_dta <- gg_error(rfsrc_airq)  # Plot the gg_error object plot(gg_dta)    ## ------------- Boston data data(Boston, package = \"MASS\") Boston$chas <- as.logical(Boston$chas) rfsrc_boston <- rfsrc(medv ~ .,   data = Boston,   forest = TRUE,   importance = TRUE,   tree.err = TRUE,   save.memory = TRUE )  # Get a data.frame containing error rates gg_dta <- gg_error(rfsrc_boston)  # Plot the gg_error object plot(gg_dta)    ## ------------- mtcars data rfsrc_mtcars <- rfsrc(mpg ~ ., data = mtcars, tree.err = TRUE)  # Get a data.frame containing error rates gg_dta<- gg_error(rfsrc_mtcars)  # Plot the gg_error object plot(gg_dta)    ## ------------------------------------------------------------ ## Survival example ## ------------------------------------------------------------ ## ------------- veteran data ## randomized trial of two treatment regimens for lung cancer data(veteran, package = \"randomForestSRC\") rfsrc_veteran <- rfsrc(Surv(time, status) ~ ., data = veteran,                        tree.err = TRUE)  gg_dta <- gg_error(rfsrc_veteran) plot(gg_dta)   ## ------------- pbc data # Load a cached randomForestSRC object # We need to create this dataset data(pbc, package = \"randomForestSRC\",) #> Warning: data set ‘’ not found # For whatever reason, the age variable is in days... makes no sense to me for (ind in seq_len(dim(pbc)[2])) {  if (!is.factor(pbc[, ind])) {    if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {      if (sum(range(pbc[, ind], na.rm = TRUE) == c(0, 1)) == 2) {        pbc[, ind] <- as.logical(pbc[, ind])      }    }  } else {    if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {      if (sum(sort(unique(pbc[, ind])) == c(0, 1)) == 2) {        pbc[, ind] <- as.logical(pbc[, ind])      }      if (sum(sort(unique(pbc[, ind])) == c(FALSE, TRUE)) == 2) {        pbc[, ind] <- as.logical(pbc[, ind])      }    }  }  if (!is.logical(pbc[, ind]) &      length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 5) {    pbc[, ind] <- factor(pbc[, ind])  } } #Convert age to years pbc$age <- pbc$age / 364.24  pbc$years <- pbc$days / 364.24 pbc <- pbc[, -which(colnames(pbc) == \"days\")] pbc$treatment <- as.numeric(pbc$treatment) pbc$treatment[which(pbc$treatment == 1)] <- \"DPCA\" pbc$treatment[which(pbc$treatment == 2)] <- \"placebo\" pbc$treatment <- factor(pbc$treatment) dta_train <- pbc[-which(is.na(pbc$treatment)), ] # Create a test set from the remaining patients pbc_test <- pbc[which(is.na(pbc$treatment)), ]  #======== # build the forest: rfsrc_pbc <- randomForestSRC::rfsrc(   Surv(years, status) ~ .,  dta_train,  nsplit = 10,  na.action = \"na.impute\",  tree.err = TRUE,  forest = TRUE,  importance = TRUE,  save.memory = TRUE )   gg_dta <- gg_error(rfsrc_pbc) plot(gg_dta)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_partial.html","id":null,"dir":"Reference","previous_headings":"","what":"Split partial lots into continuous or categorical datasets — gg_partial","title":"Split partial lots into continuous or categorical datasets — gg_partial","text":"Split partial lots continuous categorical datasets","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_partial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split partial lots into continuous or categorical datasets — gg_partial","text":"","code":"gg_partial(part_dta, nvars = NULL, cat_limit = 10, model = NULL)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_partial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split partial lots into continuous or categorical datasets — gg_partial","text":"part_dta partial plot data rfsrc::plot.variable nvars many partial plot variables calculate cat_limit Categorical features build fewer cat_limit unique features. model label name applied features. Useful combining multiple partial plot objects figures.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_partial_rfsrc.html","id":null,"dir":"Reference","previous_headings":"","what":"Split partial lots into continuous or categorical datasets — gg_partial_rfsrc","title":"Split partial lots into continuous or categorical datasets — gg_partial_rfsrc","text":"gg_partial_rfsrc uses rfsrc::partial.rfsrc generate partial plot data internally. provide rfsrc::rfsrc model, xvar.names generate data.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_partial_rfsrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split partial lots into continuous or categorical datasets — gg_partial_rfsrc","text":"","code":"gg_partial_rfsrc(rf_model, xvar.names, cat_limit = 10)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_partial_rfsrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split partial lots into continuous or categorical datasets — gg_partial_rfsrc","text":"rf_model rfsrc::rfsrc model xvar.names variables calculate partial plots cat_limit Categorical features build fewer  cat_limit unique features. #'","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_partialpro.html","id":null,"dir":"Reference","previous_headings":"","what":"Split partial lots into continuous or categorical datasets — gg_partialpro","title":"Split partial lots into continuous or categorical datasets — gg_partialpro","text":"Split partial lots continuous categorical datasets","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_partialpro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split partial lots into continuous or categorical datasets — gg_partialpro","text":"","code":"gg_partialpro(part_dta, nvars = NULL, cat_limit = 10, model = NULL)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_partialpro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split partial lots into continuous or categorical datasets — gg_partialpro","text":"part_dta partial plot data varpro::partialpro nvars many partial plot variables calculate cat_limit Categorical features build fewer cat_limit unique features. model label name applied features. Useful combining multiple partial plot objects figures.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_rfsrc.rfsrc.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted response data object — gg_rfsrc.rfsrc","title":"Predicted response data object — gg_rfsrc.rfsrc","text":"Extracts predicted response values rfsrc object, formats data plotting response using plot.gg_rfsrc.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_rfsrc.rfsrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted response data object — gg_rfsrc.rfsrc","text":"","code":"# S3 method for class 'rfsrc' gg_rfsrc(object, oob = TRUE, by, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_rfsrc.rfsrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicted response data object — gg_rfsrc.rfsrc","text":"object rfsrc object oob boolean, return oob prediction , full forest prediction. stratifying variable training dataset, defaults NULL ... extra arguments","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_rfsrc.rfsrc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicted response data object — gg_rfsrc.rfsrc","text":"gg_rfsrc object","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_rfsrc.rfsrc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predicted response data object — gg_rfsrc.rfsrc","text":"surv_type (\"surv\", \"chf\", \"mortality\", \"hazard\") survival    forests oob boolean, return oob prediction , full forest prediction.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_roc.rfsrc.html","id":null,"dir":"Reference","previous_headings":"","what":"ROC (Receiver operator curve) data from a classification random forest. — gg_roc.rfsrc","title":"ROC (Receiver operator curve) data from a classification random forest. — gg_roc.rfsrc","text":"sensitivity specificity randomForest classification object.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_roc.rfsrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ROC (Receiver operator curve) data from a classification random forest. — gg_roc.rfsrc","text":"","code":"# S3 method for class 'rfsrc' gg_roc(object, which_outcome, oob, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_roc.rfsrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ROC (Receiver operator curve) data from a classification random forest. — gg_roc.rfsrc","text":"object rfsrc classification object which_outcome select classification outcome interest. oob use oob estimates (default TRUE) ... extra arguments (used)","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_roc.rfsrc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ROC (Receiver operator curve) data from a classification random forest. — gg_roc.rfsrc","text":"gg_roc data.frame plotting ROC curves.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_roc.rfsrc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ROC (Receiver operator curve) data from a classification random forest. — gg_roc.rfsrc","text":"","code":"## ------------------------------------------------------------ ## classification example ## ------------------------------------------------------------ ## -------- iris data rfsrc_iris <- rfsrc(Species ~ ., data = iris)  # ROC for setosa gg_dta <- gg_roc(rfsrc_iris, which_outcome = 1) plot(gg_dta)   # ROC for versicolor gg_dta <- gg_roc(rfsrc_iris, which_outcome = 2) plot(gg_dta)   # ROC for virginica gg_dta <- gg_roc(rfsrc_iris, which_outcome = 3) plot(gg_dta)   ## -------- iris data rf_iris <- randomForest::randomForest(Species ~ ., data = iris)  # ROC for setosa gg_dta <- gg_roc(rf_iris, which_outcome = 1) plot(gg_dta)   # ROC for versicolor gg_dta <- gg_roc(rf_iris, which_outcome = 2) plot(gg_dta)   # ROC for virginica gg_dta <- gg_roc(rf_iris, which_outcome = 3) plot(gg_dta)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Nonparametric survival estimates. — gg_survival","title":"Nonparametric survival estimates. — gg_survival","text":"Nonparametric survival estimates.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nonparametric survival estimates. — gg_survival","text":"","code":"gg_survival(   interval = NULL,   censor = NULL,   by = NULL,   data,   type = c(\"kaplan\", \"nelson\"),   ... )"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nonparametric survival estimates. — gg_survival","text":"interval name interval variable training dataset. censor name censoring variable training dataset. stratifying variable training dataset, defaults NULL data name training data.frame type one (\"kaplan\",\"nelson\"), defaults Kaplan-Meier ... extra arguments passed Kaplan Nelson functions.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nonparametric survival estimates. — gg_survival","text":"gg_survival object created using non-parametric Kaplan-Meier Nelson-Aalen estimators.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_survival.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nonparametric survival estimates. — gg_survival","text":"gg_survival wrapper function generating nonparametric survival estimates using either nelson-Aalen kaplan-Meier estimates.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nonparametric survival estimates. — gg_survival","text":"","code":"## -------- pbc data data(pbc, package = \"randomForestSRC\") pbc$time <- pbc$days / 364.25  # This is the same as kaplan gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc )  plot(gg_dta, error = \"none\")  plot(gg_dta)   # Stratified on treatment variable. gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc, by = \"treatment\" )  plot(gg_dta, error = \"none\")  plot(gg_dta)   # ...with smaller confidence limits. gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc, by = \"treatment\", conf.int = .68 )  plot(gg_dta, error = \"lines\")"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal variable dependence data object. — gg_variable","title":"Marginal variable dependence data object. — gg_variable","text":"plot.variable generates data.frame containing marginal variable dependence partial variable dependence. gg_variable function creates data.frame containing full set covariate data (predictor variables) predicted response observation. Marginal dependence figures created using plot.gg_variable function. Optional arguments time point (vector points) interest (survival forests ) time_labels one time specified, vector time labels differentiating time points (survival forests ) oob indicate predicted results include oob full data set.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal variable dependence data object. — gg_variable","text":"","code":"gg_variable(object, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal variable dependence data object. — gg_variable","text":"object rfsrc object ... optional arguments","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marginal variable dependence data object. — gg_variable","text":"gg_variable object","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_variable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Marginal variable dependence data object. — gg_variable","text":"marginal variable dependence determined comparing relation predicted response randomForest covariate interest. gg_variable function operates rfsrc object, output plot.variable function.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal variable dependence data object. — gg_variable","text":"","code":"## ------------------------------------------------------------ ## classification ## ------------------------------------------------------------ ## -------- iris data ## iris rfsrc_iris <- rfsrc(Species ~ ., data = iris)  gg_dta <- gg_variable(rfsrc_iris) plot(gg_dta, xvar = \"Sepal.Width\")  plot(gg_dta, xvar = \"Sepal.Length\")   plot(gg_dta,   xvar = rfsrc_iris$xvar.names,   panel = TRUE ) # , se=FALSE)   ## ------------------------------------------------------------ ## regression ## ------------------------------------------------------------  ## -------- air quality data rfsrc_airq <- rfsrc(Ozone ~ ., data = airquality) gg_dta <- gg_variable(rfsrc_airq)  # an ordinal variable gg_dta[, \"Month\"] <- factor(gg_dta[, \"Month\"])  plot(gg_dta, xvar = \"Wind\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  plot(gg_dta, xvar = \"Temp\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  plot(gg_dta, xvar = \"Solar.R\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'    plot(gg_dta, xvar = c(\"Solar.R\", \"Wind\", \"Temp\", \"Day\"), panel = TRUE) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   plot(gg_dta, xvar = \"Month\", notch = TRUE) #> Warning: Ignoring unknown parameters: `notch` #> Notch went outside hinges #> ℹ Do you want `notch = FALSE`? #> Notch went outside hinges #> ℹ Do you want `notch = FALSE`?   ## -------- motor trend cars data rfsrc_mtcars <- rfsrc(mpg ~ ., data = mtcars)  gg_dta <- gg_variable(rfsrc_mtcars)  # mtcars$cyl is an ordinal variable gg_dta$cyl <- factor(gg_dta$cyl) gg_dta$am <- factor(gg_dta$am) gg_dta$vs <- factor(gg_dta$vs) gg_dta$gear <- factor(gg_dta$gear) gg_dta$carb <- factor(gg_dta$carb)  plot(gg_dta, xvar = \"cyl\")   # Others are continuous plot(gg_dta, xvar = \"disp\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  plot(gg_dta, xvar = \"hp\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  plot(gg_dta, xvar = \"wt\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   # panels plot(gg_dta, xvar = c(\"disp\", \"hp\", \"drat\", \"wt\", \"qsec\"), panel = TRUE) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  plot(gg_dta,   xvar = c(\"cyl\", \"vs\", \"am\", \"gear\", \"carb\"), panel = TRUE,   notch = TRUE ) #> Warning: attributes are not identical across measure variables; they will be dropped #> Warning: Ignoring unknown parameters: `notch` #> Warning: Ignoring unknown parameters: `notch` #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   ## -------- Boston data data(Boston, package = \"MASS\")  rf_boston <- randomForest::randomForest(medv ~ ., data = Boston) gg_dta <- gg_variable(rf_boston) plot(gg_dta) #> [[1]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[2]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: pseudoinverse used at -0.5 #> Warning: neighborhood radius 13 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 156.25 #> Warning: pseudoinverse used at -0.5 #> Warning: neighborhood radius 13 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 156.25  #>  #> [[3]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[4]]  #>  #> [[5]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[6]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[7]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[8]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[9]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[10]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[11]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[12]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  #> [[13]] #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  #>  plot(gg_dta, panel = TRUE) #> Warning: Mismatched variable types... #>                   assuming these are all factor variables. #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: pseudoinverse used at -0.5 #> Warning: neighborhood radius 13 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 156.25 #> Warning: pseudoinverse used at -0.5 #> Warning: neighborhood radius 13 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 156.25 #> Warning: at  -0.005 #> Warning: radius  2.5e-05 #> Warning: all data on boundary of neighborhood. make span bigger #> Warning: pseudoinverse used at -0.005 #> Warning: neighborhood radius 0.005 #> Warning: reciprocal condition number  1 #> Warning: There are other near singularities as well. 1.01 #> Warning: zero-width neighborhood. make span bigger #> Warning: Failed to fit group -1. #> Caused by error in `predLoess()`: #> ! NA/NaN/Inf in foreign function call (arg 5)  ## ------------------------------------------------------------ ## survival examples ## ------------------------------------------------------------  ## -------- veteran data ## survival data(veteran, package = \"randomForestSRC\") rfsrc_veteran <- rfsrc(Surv(time, status) ~ ., veteran,   nsplit = 10,   ntree = 100 )  # get the 1 year survival time. gg_dta <- gg_variable(rfsrc_veteran, time = 90)  # Generate variable dependence plots for age and diagtime plot(gg_dta, xvar = \"age\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  plot(gg_dta, xvar = \"diagtime\", ) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   # Generate coplots plot(gg_dta, xvar = c(\"age\", \"diagtime\"), panel = TRUE, se = FALSE) #> Warning: Ignoring unknown parameters: `se` #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   # If we want to compare survival at different time points, say 30, 90 day # and 1 year gg_dta <- gg_variable(rfsrc_veteran, time = c(30, 90, 365))  # Generate variable dependence plots for age and diagtime plot(gg_dta, xvar = \"age\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   ## -------- pbc data ## We don't run this because of bootstrap confidence limits # We need to create this dataset data(pbc, package = \"randomForestSRC\", ) #> Warning: data set ‘’ not found # For whatever reason, the age variable is in days... makes no sense to me for (ind in seq_len(dim(pbc)[2])) {   if (!is.factor(pbc[, ind])) {     if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {       if (sum(range(pbc[, ind], na.rm = TRUE) == c(0, 1)) == 2) {         pbc[, ind] <- as.logical(pbc[, ind])       }     }   } else {     if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {       if (sum(sort(unique(pbc[, ind])) == c(0, 1)) == 2) {         pbc[, ind] <- as.logical(pbc[, ind])       }       if (sum(sort(unique(pbc[, ind])) == c(FALSE, TRUE)) == 2) {         pbc[, ind] <- as.logical(pbc[, ind])       }     }   }   if (!is.logical(pbc[, ind]) &     length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 5) {     pbc[, ind] <- factor(pbc[, ind])   } } # Convert age to years pbc$age <- pbc$age / 364.24  pbc$years <- pbc$days / 364.24 pbc <- pbc[, -which(colnames(pbc) == \"days\")] pbc$treatment <- as.numeric(pbc$treatment) pbc$treatment[which(pbc$treatment == 1)] <- \"DPCA\" pbc$treatment[which(pbc$treatment == 2)] <- \"placebo\" pbc$treatment <- factor(pbc$treatment) dta_train <- pbc[-which(is.na(pbc$treatment)), ] # Create a test set from the remaining patients pbc_test <- pbc[which(is.na(pbc$treatment)), ]  # ======== # build the forest: rfsrc_pbc <- randomForestSRC::rfsrc(   Surv(years, status) ~ .,   dta_train,   nsplit = 10,   na.action = \"na.impute\",   forest = TRUE,   importance = TRUE,   save.memory = TRUE )  gg_dta <- gg_variable(rfsrc_pbc, time = c(.5, 1, 3)) plot(gg_dta, xvar = \"age\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'  plot(gg_dta, xvar = \"trig\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: Removed 90 rows containing non-finite outside the scale range #> (`stat_smooth()`). #> Warning: Removed 90 rows containing missing values or values outside the scale range #> (`geom_point()`).   # Generate coplots plot(gg_dta, xvar = c(\"age\", \"trig\"), panel = TRUE, se = FALSE) #> Warning: Ignoring unknown parameters: `se` #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: Removed 90 rows containing non-finite outside the scale range #> (`stat_smooth()`). #> Warning: Removed 90 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_vimp.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Importance (VIMP) data object — gg_vimp","title":"Variable Importance (VIMP) data object — gg_vimp","text":"gg_vimp Extracts variable importance (VIMP) information rfsrc object.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_vimp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Importance (VIMP) data object — gg_vimp","text":"","code":"gg_vimp(object, nvar, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_vimp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable Importance (VIMP) data object — gg_vimp","text":"object rfsrc object output vimp nvar argument control number variables included output. ... arguments passed vimp.rfsrc function rfsrc object contain importance information.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_vimp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable Importance (VIMP) data object — gg_vimp","text":"gg_vimp object. data.frame VIMP measures, rank order.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_vimp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Variable Importance (VIMP) data object — gg_vimp","text":"Ishwaran H. (2007). Variable importance binary regression trees forests, Electronic J. Statist., 1:519-537.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/gg_vimp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Importance (VIMP) data object — gg_vimp","text":"","code":"## ------------------------------------------------------------ ## classification example ## ------------------------------------------------------------ ## -------- iris data rfsrc_iris <- rfsrc(Species ~ .,   data = iris,   importance = TRUE ) gg_dta <- gg_vimp(rfsrc_iris) plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 16 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.   ## ------------------------------------------------------------ ## regression example ## ------------------------------------------------------------  ## -------- air quality data rfsrc_airq <- rfsrc(Ozone ~ ., airquality,   importance = TRUE ) gg_dta <- gg_vimp(rfsrc_airq) plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 5 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.    ## -------- Boston data data(Boston, package = \"MASS\") rfsrc_boston <- randomForestSRC::rfsrc(medv ~ ., Boston,   importance = TRUE ) gg_dta <- gg_vimp(rfsrc_boston) plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 13 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.   ## -------- Boston data rf_boston <- randomForest::randomForest(medv ~ ., Boston) gg_dta <- gg_vimp(rf_boston) plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 13 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.    ## -------- mtcars data rfsrc_mtcars <- rfsrc(mpg ~ .,   data = mtcars,   importance = TRUE ) gg_dta <- gg_vimp(rfsrc_mtcars) plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 10 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.   ## ------------------------------------------------------------ ## survival example ## ------------------------------------------------------------  ## -------- veteran data data(veteran, package = \"randomForestSRC\") rfsrc_veteran <- rfsrc(Surv(time, status) ~ .,   data = veteran,   ntree = 100,   importance = TRUE )  gg_dta <- gg_vimp(rfsrc_veteran) plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 6 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.   ## -------- pbc data # We need to create this dataset data(pbc, package = \"randomForestSRC\", ) #> Warning: data set ‘’ not found # For whatever reason, the age variable is in days... # makes no sense to me for (ind in seq_len(dim(pbc)[2])) {   if (!is.factor(pbc[, ind])) {     if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {       if (sum(range(pbc[, ind], na.rm = TRUE) == c(0, 1)) == 2) {         pbc[, ind] <- as.logical(pbc[, ind])       }     }   } else {     if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {       if (sum(sort(unique(pbc[, ind])) == c(0, 1)) == 2) {         pbc[, ind] <- as.logical(pbc[, ind])       }       if (sum(sort(unique(pbc[, ind])) == c(FALSE, TRUE)) == 2) {         pbc[, ind] <- as.logical(pbc[, ind])       }     }   }   if (!is.logical(pbc[, ind]) &     length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 5) {     pbc[, ind] <- factor(pbc[, ind])   } } # Convert age to years pbc$age <- pbc$age / 364.24  pbc$years <- pbc$days / 364.24 pbc <- pbc[, -which(colnames(pbc) == \"days\")] pbc$treatment <- as.numeric(pbc$treatment) pbc$treatment[which(pbc$treatment == 1)] <- \"DPCA\" pbc$treatment[which(pbc$treatment == 2)] <- \"placebo\" pbc$treatment <- factor(pbc$treatment) dta_train <- pbc[-which(is.na(pbc$treatment)), ] # Create a test set from the remaining patients pbc_test <- pbc[which(is.na(pbc$treatment)), ]  # ======== # build the forest: rfsrc_pbc <- randomForestSRC::rfsrc(   Surv(years, status) ~ .,   dta_train,   nsplit = 10,   na.action = \"na.impute\",   forest = TRUE,   importance = TRUE,   save.memory = TRUE )  gg_dta <- gg_vimp(rfsrc_pbc) plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 17 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.   # Restrict to only the top 10. gg_dta <- gg_vimp(rfsrc_pbc, nvar = 10) plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 10 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row."},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/kaplan.html","id":null,"dir":"Reference","previous_headings":"","what":"nonparametric Kaplan-Meier estimates — kaplan","title":"nonparametric Kaplan-Meier estimates — kaplan","text":"nonparametric Kaplan-Meier estimates","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/kaplan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nonparametric Kaplan-Meier estimates — kaplan","text":"","code":"kaplan(interval, censor, data, by = NULL, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/kaplan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nonparametric Kaplan-Meier estimates — kaplan","text":"interval name interval variable training dataset. censor name censoring variable training dataset. data name training set data.frame stratifying variable training dataset, defaults NULL ... arguments passed survfit function","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/kaplan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nonparametric Kaplan-Meier estimates — kaplan","text":"gg_survival object","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/kaplan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nonparametric Kaplan-Meier estimates — kaplan","text":"","code":"# These get run through the gg_survival examples. data(pbc, package = \"randomForestSRC\") pbc$time <- pbc$days / 364.25  # This is the same as gg_survival gg_dta <- kaplan(   interval = \"time\", censor = \"status\",   data = pbc )  plot(gg_dta, error = \"none\")  plot(gg_dta)   # Stratified on treatment variable. gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc, by = \"treatment\" )  plot(gg_dta, error = \"none\")  plot(gg_dta)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/nelson.html","id":null,"dir":"Reference","previous_headings":"","what":"nonparametric Nelson-Aalen estimates — nelson","title":"nonparametric Nelson-Aalen estimates — nelson","text":"nonparametric Nelson-Aalen estimates","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/nelson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nonparametric Nelson-Aalen estimates — nelson","text":"","code":"nelson(interval, censor, data, by = NULL, weight = NULL, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/nelson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nonparametric Nelson-Aalen estimates — nelson","text":"interval name interval variable training dataset. censor name censoring variable training dataset. data name survival training data.frame stratifying variable training dataset, defaults NULL weight observation (default=NULL) ... arguments passed survfit function","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/nelson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nonparametric Nelson-Aalen estimates — nelson","text":"gg_survival object","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/nelson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nonparametric Nelson-Aalen estimates — nelson","text":"","code":"# These get run through the gg_survival examples. data(pbc, package = \"randomForestSRC\") pbc$time <- pbc$days / 364.25  # This is the same as gg_survival gg_dta <- nelson(   interval = \"time\", censor = \"status\",   data = pbc )  plot(gg_dta, error = \"none\")  plot(gg_dta)   # Stratified on treatment variable. gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc, by = \"treatment\" )  plot(gg_dta, error = \"none\")  plot(gg_dta, error = \"lines\")  plot(gg_dta)   gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc, by = \"treatment\",   type = \"nelson\" )  plot(gg_dta, error = \"bars\")  plot(gg_dta)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a gg_error object — plot.gg_error","title":"Plot a gg_error object — plot.gg_error","text":"plot cumulative OOB error rates random forest function number trees.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a gg_error object — plot.gg_error","text":"","code":"# S3 method for class 'gg_error' plot(x, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a gg_error object — plot.gg_error","text":"x gg_error object created rfsrc object ... extra arguments passed ggplot functions","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a gg_error object — plot.gg_error","text":"ggplot object","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a gg_error object — plot.gg_error","text":"gg_error plot used track convergence randomForest. figure reproduction error plot plot.rfsrc function.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_error.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot a gg_error object — plot.gg_error","text":"Breiman L. (2001). Random forests, Machine Learning, 45:5-32. Ishwaran H. Kogalur U.B. (2007). Random survival forests R, Rnews, 7(2):25-31. Ishwaran H. Kogalur U.B. (2013). Random Forests Survival, Regression Classification (RF-SRC), R package version 1.4.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a gg_error object — plot.gg_error","text":"","code":"## Examples from RFSRC package... ## ------------------------------------------------------------ ## classification example ## ------------------------------------------------------------ ## ------------- iris data ## You can build a randomForest rfsrc_iris <- rfsrc(Species ~ ., data = iris,   forest = TRUE,   importance = TRUE,   tree.err = TRUE,   save.memory = TRUE)  # Get a data.frame containing error rates gg_dta <- gg_error(rfsrc_iris)  # Plot the gg_error object plot(gg_dta)   ## RandomForest example rf_iris <- randomForest::randomForest(Species ~ .,   data = iris,   forest = TRUE,   importance = TRUE,   tree.err = TRUE,   save.memory = TRUE ) gg_dta <- gg_error(rf_iris) plot(gg_dta)   gg_dta <- gg_error(rf_iris, training = TRUE) plot(gg_dta)  ## ------------------------------------------------------------ ## Regression example ## ------------------------------------------------------------ ## ------------- airq data rfsrc_airq <- rfsrc(Ozone ~ .,   data = airquality,   na.action = \"na.impute\",    forest = TRUE,   importance = TRUE,   tree.err = TRUE,   save.memory = TRUE )  # Get a data.frame containing error rates gg_dta <- gg_error(rfsrc_airq)  # Plot the gg_error object plot(gg_dta)    ## ------------- Boston data data(Boston, package = \"MASS\") Boston$chas <- as.logical(Boston$chas) rfsrc_boston <- rfsrc(medv ~ .,   data = Boston,   forest = TRUE,   importance = TRUE,   tree.err = TRUE,   save.memory = TRUE )  # Get a data.frame containing error rates gg_dta <- gg_error(rfsrc_boston)  # Plot the gg_error object plot(gg_dta)   ## ------------- mtcars data rfsrc_mtcars <- rfsrc(mpg ~ ., data = mtcars,   importance = TRUE,   save.memory = TRUE,   forest = TRUE,   tree.err = TRUE)  # Get a data.frame containing error rates gg_dta<- gg_error(rfsrc_mtcars)  # Plot the gg_error object plot(gg_dta)    ## ------------------------------------------------------------ ## Survival example ## ------------------------------------------------------------ ## ------------- veteran data ## randomized trial of two treatment regimens for lung cancer data(veteran, package = \"randomForestSRC\") rfsrc_veteran <- rfsrc(Surv(time, status) ~ ., data = veteran,                        tree.err = TRUE)  gg_dta <- gg_error(rfsrc_veteran) plot(gg_dta)   ## ------------- pbc data # Load a cached randomForestSRC object # We need to create this dataset data(pbc, package = \"randomForestSRC\",) #> Warning: data set ‘’ not found # For whatever reason, the age variable is in days... makes no sense to me for (ind in seq_len(dim(pbc)[2])) {  if (!is.factor(pbc[, ind])) {    if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {      if (sum(range(pbc[, ind], na.rm = TRUE) == c(0, 1)) == 2) {        pbc[, ind] <- as.logical(pbc[, ind])      }    }  } else {    if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {      if (sum(sort(unique(pbc[, ind])) == c(0, 1)) == 2) {        pbc[, ind] <- as.logical(pbc[, ind])      }      if (sum(sort(unique(pbc[, ind])) == c(FALSE, TRUE)) == 2) {        pbc[, ind] <- as.logical(pbc[, ind])      }    }  }  if (!is.logical(pbc[, ind]) &      length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 5) {    pbc[, ind] <- factor(pbc[, ind])  } } #Convert age to years pbc$age <- pbc$age / 364.24  pbc$years <- pbc$days / 364.24 pbc <- pbc[, -which(colnames(pbc) == \"days\")] pbc$treatment <- as.numeric(pbc$treatment) pbc$treatment[which(pbc$treatment == 1)] <- \"DPCA\" pbc$treatment[which(pbc$treatment == 2)] <- \"placebo\" pbc$treatment <- factor(pbc$treatment) dta_train <- pbc[-which(is.na(pbc$treatment)), ] # Create a test set from the remaining patients pbc_test <- pbc[which(is.na(pbc$treatment)), ]  #======== # build the forest: rfsrc_pbc <- randomForestSRC::rfsrc(   Surv(years, status) ~ .,  dta_train,  nsplit = 10,  na.action = \"na.impute\",  tree.err = TRUE,  forest = TRUE,  importance = TRUE,  save.memory = TRUE )   gg_dta <- gg_error(rfsrc_pbc) plot(gg_dta)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_rfsrc.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted response plot from a gg_rfsrc object. — plot.gg_rfsrc","title":"Predicted response plot from a gg_rfsrc object. — plot.gg_rfsrc","text":"Plot predicted response gg_rfsrc object, rfsrc prediction, using OOB prediction forest.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_rfsrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted response plot from a gg_rfsrc object. — plot.gg_rfsrc","text":"","code":"# S3 method for class 'gg_rfsrc' plot(x, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_rfsrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicted response plot from a gg_rfsrc object. — plot.gg_rfsrc","text":"x gg_rfsrc object created rfsrc object ... arguments passed gg_rfsrc.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_rfsrc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicted response plot from a gg_rfsrc object. — plot.gg_rfsrc","text":"ggplot object","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_rfsrc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predicted response plot from a gg_rfsrc object. — plot.gg_rfsrc","text":"Breiman L. (2001). Random forests, Machine Learning, 45:5-32. Ishwaran H. Kogalur U.B. (2007). Random survival forests R, Rnews, 7(2):25-31. Ishwaran H. Kogalur U.B. (2013). Random Forests Survival, Regression Classification (RF-SRC), R package version 1.4.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_rfsrc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicted response plot from a gg_rfsrc object. — plot.gg_rfsrc","text":"","code":"if (FALSE) { # \\dontrun{ ## ------------------------------------------------------------ ## classification example ## ------------------------------------------------------------ ## -------- iris data # rfsrc_iris <- rfsrc(Species ~ ., data = iris) data(rfsrc_iris, package = \"ggRandomForests\") gg_dta <- gg_rfsrc(rfsrc_iris)  plot(gg_dta)  ## ------------------------------------------------------------ ## Regression example ## ------------------------------------------------------------ ## -------- air quality data rfsrc_airq <- rfsrc(Ozone ~ ., data = airquality, na.action = \"na.impute\") gg_dta <- gg_rfsrc(rfsrc_airq)  plot(gg_dta)  ## -------- Boston data data(Boston, package = \"MASS\") rfsrc_boston <- randomForestSRC::rfsrc(medv ~ ., Boston)  plot(rfsrc_boston)  ## -------- mtcars data rfsrc_mtcars <- rfsrc(mpg ~ ., data = mtcars) gg_dta <- gg_rfsrc(rfsrc_mtcars)  plot(gg_dta)  ## ------------------------------------------------------------ ## Survival example ## ------------------------------------------------------------ ## -------- veteran data ## randomized trial of two treatment regimens for lung cancer data(veteran, package = \"randomForestSRC\") rfsrc_veteran <- rfsrc(Surv(time, status) ~ ., data = veteran, ntree = 100) gg_dta <- gg_rfsrc(rfsrc_veteran) plot(gg_dta)  gg_dta <- gg_rfsrc(rfsrc_veteran, conf.int = .95) plot(gg_dta)  gg_dta <- gg_rfsrc(rfsrc_veteran, by = \"trt\") plot(gg_dta)  ## -------- pbc data #' # We need to create this dataset data(pbc, package = \"randomForestSRC\", ) # For whatever reason, the age variable is in days... makes no sense to me for (ind in seq_len(dim(pbc)[2])) {   if (!is.factor(pbc[, ind])) {     if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {       if (sum(range(pbc[, ind], na.rm = TRUE) == c(0, 1)) == 2) {         pbc[, ind] <- as.logical(pbc[, ind])       }     }   } else {     if (length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 2) {       if (sum(sort(unique(pbc[, ind])) == c(0, 1)) == 2) {         pbc[, ind] <- as.logical(pbc[, ind])       }       if (sum(sort(unique(pbc[, ind])) == c(FALSE, TRUE)) == 2) {         pbc[, ind] <- as.logical(pbc[, ind])       }     }   }   if (!is.logical(pbc[, ind]) &     length(unique(pbc[which(!is.na(pbc[, ind])), ind])) <= 5) {     pbc[, ind] <- factor(pbc[, ind])   } } # Convert age to years pbc$age <- pbc$age / 364.24  pbc$years <- pbc$days / 364.24 pbc <- pbc[, -which(colnames(pbc) == \"days\")] pbc$treatment <- as.numeric(pbc$treatment) pbc$treatment[which(pbc$treatment == 1)] <- \"DPCA\" pbc$treatment[which(pbc$treatment == 2)] <- \"placebo\" pbc$treatment <- factor(pbc$treatment) dta_train <- pbc[-which(is.na(pbc$treatment)), ] # Create a test set from the remaining patients pbc_test <- pbc[which(is.na(pbc$treatment)), ]  # ======== # build the forest: rfsrc_pbc <- randomForestSRC::rfsrc(   Surv(years, status) ~ .,   dta_train,   nsplit = 10,   na.action = \"na.impute\",   forest = TRUE,   importance = TRUE,   save.memory = TRUE )  gg_dta <- gg_rfsrc(rfsrc_pbc) plot(gg_dta)  gg_dta <- gg_rfsrc(rfsrc_pbc, conf.int = .95) plot(gg_dta)  gg_dta <- gg_rfsrc(rfsrc_pbc, by = \"treatment\") plot(gg_dta) } # }"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_roc.html","id":null,"dir":"Reference","previous_headings":"","what":"ROC plot generic function for a gg_roc object. — plot.gg_roc","title":"ROC plot generic function for a gg_roc object. — plot.gg_roc","text":"ROC plot generic function gg_roc object.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ROC plot generic function for a gg_roc object. — plot.gg_roc","text":"","code":"# S3 method for class 'gg_roc' plot(x, which_outcome = NULL, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ROC plot generic function for a gg_roc object. — plot.gg_roc","text":"x gg_roc object created classification forest which_outcome multiclass problems, choose class plotting ... arguments passed gg_roc function","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ROC plot generic function for a gg_roc object. — plot.gg_roc","text":"ggplot object ROC curve","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_roc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ROC plot generic function for a gg_roc object. — plot.gg_roc","text":"Breiman L. (2001). Random forests, Machine Learning, 45:5-32. Ishwaran H. Kogalur U.B. (2007). Random survival forests R, Rnews, 7(2):25-31. Ishwaran H. Kogalur U.B. (2013). Random Forests Survival, Regression Classification (RF-SRC), R package version 1.4.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_roc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ROC plot generic function for a gg_roc object. — plot.gg_roc","text":"","code":"if (FALSE) { # \\dontrun{ ## ------------------------------------------------------------ ## classification example ## ------------------------------------------------------------ ## -------- iris data # rfsrc_iris <- rfsrc(Species ~ ., data = iris) data(rfsrc_iris, package = \"ggRandomForests\")  # ROC for setosa gg_dta <- gg_roc(rfsrc_iris, which_outcome = 1) plot.gg_roc(gg_dta)  # ROC for versicolor gg_dta <- gg_roc(rfsrc_iris, which_outcome = 2) plot.gg_roc(gg_dta)  # ROC for virginica gg_dta <- gg_roc(rfsrc_iris, which_outcome = 3) plot.gg_roc(gg_dta)  # Alternatively, you can plot all three outcomes in one go # by calling the plot function on the forest object. plot.gg_roc(rfsrc_iris) } # }"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a gg_survival object. — plot.gg_survival","title":"Plot a gg_survival object. — plot.gg_survival","text":"Plot gg_survival  object.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a gg_survival object. — plot.gg_survival","text":"","code":"# S3 method for class 'gg_survival' plot(   x,   type = c(\"surv\", \"cum_haz\", \"hazard\", \"density\", \"mid_int\", \"life\", \"proplife\"),   error = c(\"shade\", \"bars\", \"lines\", \"none\"),   label = NULL,   ... )"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a gg_survival object. — plot.gg_survival","text":"x gg_survival survival gg_rfsrc object created rfsrc object type \"surv\", \"cum_haz\", \"hazard\", \"density\", \"mid_int\", \"life\", \"proplife\" error \"shade\", \"bars\", \"lines\" \"none\" label Modify legend label gg_survival stratified samples ... used","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a gg_survival object. — plot.gg_survival","text":"ggplot object","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a gg_survival object. — plot.gg_survival","text":"","code":"## -------- pbc data data(pbc, package = \"randomForestSRC\") pbc$time <- pbc$days / 364.25  # This is the same as kaplan gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc )  plot(gg_dta, error = \"none\")  plot(gg_dta)   # Stratified on treatment variable. gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc, by = \"treatment\" )  plot(gg_dta, error = \"none\")  plot(gg_dta)  plot(gg_dta, label = \"treatment\")   # ...with smaller confidence limits. gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc, by = \"treatment\", conf.int = .68 )  plot(gg_dta, error = \"lines\")  plot(gg_dta, label = \"treatment\", error = \"lines\")   # ...with smaller confidence limits. gg_dta <- gg_survival(   interval = \"time\", censor = \"status\",   data = pbc, by = \"sex\", conf.int = .68 )  plot(gg_dta, error = \"lines\")  plot(gg_dta, label = \"sex\", error = \"lines\")"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a gg_variable object, — plot.gg_variable","title":"Plot a gg_variable object, — plot.gg_variable","text":"Plot gg_variable object,","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a gg_variable object, — plot.gg_variable","text":"","code":"# S3 method for class 'gg_variable' plot(   x,   xvar,   time,   time_labels,   panel = FALSE,   oob = TRUE,   points = TRUE,   smooth = TRUE,   ... )"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a gg_variable object, — plot.gg_variable","text":"x gg_variable object created rfsrc object xvar variable (list variables) interest. time survival, one times interest time_labels string labels times panel plots faceted along multiple xvar? oob oob estimates (boolean) points plot raw data points (boolean) smooth include smooth curve (boolean) ... arguments passed ggplot2 functions.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a gg_variable object, — plot.gg_variable","text":"single ggplot object, list ggplot objects","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_variable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot a gg_variable object, — plot.gg_variable","text":"Breiman L. (2001). Random forests, Machine Learning, 45:5-32. Ishwaran H. Kogalur U.B. (2007). Random survival forests R, Rnews, 7(2):25-31. Ishwaran H. Kogalur U.B. (2013). Random Forests Survival, Regression Classification (RF-SRC), R package version 1.4.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a gg_variable object, — plot.gg_variable","text":"","code":"if (FALSE) { # \\dontrun{ ## ------------------------------------------------------------ ## classification ## ------------------------------------------------------------ ## -------- iris data ## iris # rfsrc_iris <- rfsrc(Species ~., data = iris) data(rfsrc_iris, package = \"ggRandomForests\")  gg_dta <- gg_variable(rfsrc_iris) plot(gg_dta, xvar = \"Sepal.Width\") plot(gg_dta, xvar = \"Sepal.Length\")  ## !! TODO !! this needs to be corrected plot(gg_dta,   xvar = rfsrc_iris$xvar.names,   panel = TRUE, se = FALSE )  ## ------------------------------------------------------------ ## regression ## ------------------------------------------------------------ ## -------- air quality data # rfsrc_airq <- rfsrc(Ozone ~ ., data = airquality) data(rfsrc_airq, package = \"ggRandomForests\") gg_dta <- gg_variable(rfsrc_airq)  # an ordinal variable gg_dta[, \"Month\"] <- factor(gg_dta[, \"Month\"])  plot(gg_dta, xvar = \"Wind\") plot(gg_dta, xvar = \"Temp\") plot(gg_dta, xvar = \"Solar.R\")  plot(gg_dta, xvar = c(\"Solar.R\", \"Wind\", \"Temp\", \"Day\"), panel = TRUE)  plot(gg_dta, xvar = \"Month\", notch = TRUE)  ## -------- motor trend cars data # rfsrc_mtcars <- rfsrc(mpg ~ ., data = mtcars) data(rfsrc_mtcars, package = \"ggRandomForests\") gg_dta <- gg_variable(rfsrc_mtcars)  # mtcars$cyl is an ordinal variable gg_dta$cyl <- factor(gg_dta$cyl) gg_dta$am <- factor(gg_dta$am) gg_dta$vs <- factor(gg_dta$vs) gg_dta$gear <- factor(gg_dta$gear) gg_dta$carb <- factor(gg_dta$carb)  plot(gg_dta, xvar = \"cyl\")  # Others are continuous plot(gg_dta, xvar = \"disp\") plot(gg_dta, xvar = \"hp\") plot(gg_dta, xvar = \"wt\")  # panel plot(gg_dta, xvar = c(\"disp\", \"hp\", \"drat\", \"wt\", \"qsec\"), panel = TRUE) plot(gg_dta, xvar = c(\"cyl\", \"vs\", \"am\", \"gear\", \"carb\"), panel = TRUE)  ## -------- Boston data  ## ------------------------------------------------------------ ## survival examples ## ------------------------------------------------------------ ## -------- veteran data ## survival data(veteran, package = \"randomForestSRC\") rfsrc_veteran <- rfsrc(Surv(time, status) ~ ., veteran,   nsplit = 10,   ntree = 100 )  # get the 1 year survival time. gg_dta <- gg_variable(rfsrc_veteran, time = 90)  # Generate variable dependance plots for age and diagtime plot(gg_dta, xvar = \"age\") plot(gg_dta, xvar = \"diagtime\")  # Generate coplots plot(gg_dta, xvar = c(\"age\", \"diagtime\"), panel = TRUE)  # If we want to compare survival at different time points, say 30, 90 day # and 1 year gg_dta <- gg_variable(rfsrc_veteran, time = c(30, 90, 365))  # Generate variable dependance plots for age and diagtime plot(gg_dta, xvar = \"age\") plot(gg_dta, xvar = \"diagtime\")  # Generate coplots plot(gg_dta, xvar = c(\"age\", \"diagtime\"), panel = TRUE)  ## -------- pbc data } # }"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_vimp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a gg_vimp object, extracted variable importance of a rfsrc object — plot.gg_vimp","title":"Plot a gg_vimp object, extracted variable importance of a rfsrc object — plot.gg_vimp","text":"Plot gg_vimp object, extracted variable importance rfsrc object","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_vimp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a gg_vimp object, extracted variable importance of a rfsrc object — plot.gg_vimp","text":"","code":"# S3 method for class 'gg_vimp' plot(x, relative, lbls, ...)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_vimp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a gg_vimp object, extracted variable importance of a rfsrc object — plot.gg_vimp","text":"x gg_vimp object created rfsrc object relative plot vimp relative vimp. Defaults vimp. lbls vector alternative variable labels. Item names variable names. ... optional arguments passed gg_vimp necessary","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_vimp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a gg_vimp object, extracted variable importance of a rfsrc object — plot.gg_vimp","text":"ggplot object","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_vimp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot a gg_vimp object, extracted variable importance of a rfsrc object — plot.gg_vimp","text":"Breiman L. (2001). Random forests, Machine Learning, 45:5-32. Ishwaran H. Kogalur U.B. (2007). Random survival forests R, Rnews, 7(2):25-31. Ishwaran H. Kogalur U.B. (2013). Random Forests Survival, Regression Classification (RF-SRC), R package version 1.4.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/plot.gg_vimp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a gg_vimp object, extracted variable importance of a rfsrc object — plot.gg_vimp","text":"","code":"## ------------------------------------------------------------ ## classification example ## ------------------------------------------------------------ ## -------- iris data rfsrc_iris <- rfsrc(Species ~ ., data = iris) gg_dta <- gg_vimp(rfsrc_iris) #> Warning: rfsrc object does not contain VIMP information. Calculating... plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 16 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.   ## ------------------------------------------------------------ ## regression example ## ------------------------------------------------------------ ## -------- air quality data rfsrc_airq <- rfsrc(Ozone ~ ., airquality) gg_dta <- gg_vimp(rfsrc_airq) #> Warning: rfsrc object does not contain VIMP information. Calculating... plot(gg_dta) #> Warning: All aesthetics have length 1, but the data has 5 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row."},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/quantile_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Find points evenly distributed along the vectors values. — quantile_pts","title":"Find points evenly distributed along the vectors values. — quantile_pts","text":"function finds point values vector argument produce  groups intervals. Setting groups=2 return three values,  two end points, one mid point (median value vector). output can passed directly breaks argument cut function creating groups coplots.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/quantile_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find points evenly distributed along the vectors values. — quantile_pts","text":"","code":"quantile_pts(object, groups, intervals = FALSE)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/quantile_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find points evenly distributed along the vectors values. — quantile_pts","text":"object vector object values. groups many points want intervals return raw points intervals passed cut function","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/quantile_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find points evenly distributed along the vectors values. — quantile_pts","text":"vector groups+1 cut point values.","code":""},{"path":[]},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/quantile_pts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find points evenly distributed along the vectors values. — quantile_pts","text":"","code":"data(Boston, package = \"MASS\") rfsrc_boston <- randomForestSRC::rfsrc(medv ~ ., Boston)  # To create 6 intervals, we want 7 points. # quantile_pts will find balanced intervals rm_pts <- quantile_pts(rfsrc_boston$xvar$rm, groups = 6, intervals = TRUE)  # Use cut to create the intervals rm_grp <- cut(rfsrc_boston$xvar$rm, breaks = rm_pts)  summary(rm_grp) #> (3.56,5.73] (5.73,5.98] (5.98,6.21] (6.21,6.47] (6.47,6.87] (6.87,8.78]  #>          81          85          92          87          81          80"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/r_data_types.html","id":null,"dir":"Reference","previous_headings":"","what":"r_data_types infers correct data classes for each column in a data.frame — r_data_types","title":"r_data_types infers correct data classes for each column in a data.frame — r_data_types","text":"Read input data set infer correct columnar r data types. Includes numeric, logical factor type data columns","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/r_data_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"r_data_types infers correct data classes for each column in a data.frame — r_data_types","text":"","code":"r_data_types(dataset, factor_size = 10)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/r_data_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"r_data_types infers correct data classes for each column in a data.frame — r_data_types","text":"dataset dataframe modify factor_size numeric features may small number unique values. turn factors.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/r_data_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"r_data_types infers correct data classes for each column in a data.frame — r_data_types","text":"data.frame datatypes logically encoded.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/r_data_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"r_data_types infers correct data classes for each column in a data.frame — r_data_types","text":"","code":"## ------------------------------------------------------------ ## -------- pbc data # We need to create this dataset data(pbc, package = \"randomForestSRC\" )  # Show data types for each column sapply(pbc,class) #>        days      status   treatment         age         sex     ascites  #>   \"integer\"   \"integer\"   \"integer\"   \"integer\"   \"integer\"   \"integer\"  #>     hepatom     spiders       edema        bili        chol     albumin  #>   \"integer\"   \"integer\"   \"numeric\"   \"numeric\"   \"integer\"   \"numeric\"  #>      copper         alk        sgot        trig    platelet prothrombin  #>   \"integer\"   \"numeric\"   \"numeric\"   \"integer\"   \"integer\"   \"numeric\"  #>       stage  #>   \"integer\"   # Correct types pbc <- r_data_types(pbc) sapply(pbc,class) #>        days      status   treatment         age         sex     ascites  #>   \"integer\"   \"logical\"   \"logical\"   \"integer\"   \"logical\"   \"logical\"  #>     hepatom     spiders       edema        bili        chol     albumin  #>   \"logical\"   \"logical\"    \"factor\"   \"numeric\"   \"integer\"   \"numeric\"  #>      copper         alk        sgot        trig    platelet prothrombin  #>   \"integer\"   \"numeric\"   \"numeric\"   \"integer\"   \"integer\"   \"numeric\"  #>       stage  #>    \"factor\""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/shift.html","id":null,"dir":"Reference","previous_headings":"","what":"lead function to shift by one (or more). — shift","title":"lead function to shift by one (or more). — shift","text":"lead function shift one ().","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lead function to shift by one (or more). — shift","text":"","code":"shift(x, shift_by = 1)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lead function to shift by one (or more). — shift","text":"x vector values shift_by integer length 1, giving number positions lead (positive) lag (negative) ","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/shift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"lead function to shift by one (or more). — shift","text":"Lead lag useful comparing values offset constant (e.g. previous next value) Taken : http://ctszkin.com/2012/03/11/generating--laglead-variables/ function allows remove dplyr::lead depends. Still suggest vignettes though.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"lead function to shift by one (or more). — shift","text":"","code":"d <- data.frame(x = 1:15) # generate lead variable d$df_lead2 <- ggRandomForests:::shift(d$x, 2) # generate lag variable d$df_lag2 <- ggRandomForests:::shift(d$x, -2) # #"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/surv_partial.rfsrc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate survival curve partial plot. — surv_partial.rfsrc","title":"Calculate survival curve partial plot. — surv_partial.rfsrc","text":"Calculate survival curve partial plot.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/surv_partial.rfsrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate survival curve partial plot. — surv_partial.rfsrc","text":"","code":"surv_partial.rfsrc(rforest, var_list, npts = 25, partial.type = \"surv\")"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/surv_partial.rfsrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate survival curve partial plot. — surv_partial.rfsrc","text":"rforest randomForestSrc object var_list list variables interest. variables subset rforest$xvar.names npts number points segment xvar interest partial.type return prediction type. survival forests: type c(\"surv\", \"mort\", \"chf\") competing risk forests: type c(\"years.lost\", \"cif\", \"chf\") see randomForestSRC::partial.rfsrc information","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/surv_partial.rfsrc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate survival curve partial plot. — surv_partial.rfsrc","text":"","code":"## ------------------------------------------------------------ ## survival ## ------------------------------------------------------------  data(veteran, package = \"randomForestSRC\") v.obj <- randomForestSRC::rfsrc(Surv(time,status)~.,    veteran, nsplit = 10, ntree = 100)  spart <- surv_partial.rfsrc(v.obj, var_list=\"age\", partial.type = \"mort\") #> partial plot for: age   ## partial effect of age on mortality partial.obj <- partial(v.obj,                        partial.type = \"mort\",                        partial.xvar = \"age\",                        partial.values = v.obj$xvar$age,                        partial.time = v.obj$time.interest) pdta <- get.partial.plot.data(partial.obj)  plot(lowess(pdta$x, pdta$yhat, f = 1/3),      type = \"l\", xlab = \"age\", ylab = \"adjusted mortality\")   ## example where x is discrete - partial effect of age on mortality ## we use the granule=TRUE option partial.obj <- partial(v.obj,                        partial.type = \"mort\",                        partial.xvar = \"trt\",                        partial.values = v.obj$xvar$trt,                        partial.time = v.obj$time.interest) pdta <- get.partial.plot.data(partial.obj, granule = TRUE) boxplot(pdta$yhat ~ pdta$x, xlab = \"treatment\", ylab = \"partial effect\")    ## partial effects of karnofsky score on survival karno <- quantile(v.obj$xvar$karno) partial.obj <- partial(v.obj,                        partial.type = \"surv\",                        partial.xvar = \"karno\",                        partial.values = karno,                        partial.time = v.obj$time.interest) pdta <- get.partial.plot.data(partial.obj)  matplot(pdta$partial.time, t(pdta$yhat), type = \"l\", lty = 1,         xlab = \"time\", ylab = \"karnofsky adjusted survival\") legend(\"topright\", legend = paste0(\"karnofsky = \", karno), fill = 1:5)    ## ------------------------------------------------------------ ## competing risk ## ------------------------------------------------------------  data(follic, package = \"randomForestSRC\") follic.obj <- rfsrc(Surv(time, status) ~ ., follic, nsplit = 3, ntree = 100)  ## partial effect of age on years lost partial.obj <- partial(follic.obj,                        partial.type = \"years.lost\",                        partial.xvar = \"age\",                        partial.values = follic.obj$xvar$age,                        partial.time = follic.obj$time.interest) pdta1 <- get.partial.plot.data(partial.obj, target = 1) pdta2 <- get.partial.plot.data(partial.obj, target = 2)  par(mfrow=c(2,2)) plot(lowess(pdta1$x, pdta1$yhat),      type = \"l\", xlab = \"age\", ylab = \"adjusted years lost relapse\") plot(lowess(pdta2$x, pdta2$yhat),      type = \"l\", xlab = \"age\", ylab = \"adjusted years lost death\")  ## partial effect of age on cif partial.obj <- partial(follic.obj,                        partial.type = \"cif\",                        partial.xvar = \"age\",                        partial.values = quantile(follic.obj$xvar$age),                        partial.time = follic.obj$time.interest) pdta1 <- get.partial.plot.data(partial.obj, target = 1) pdta2 <- get.partial.plot.data(partial.obj, target = 2)  matplot(pdta1$partial.time, t(pdta1$yhat), type = \"l\", lty = 1,         xlab = \"time\", ylab = \"age adjusted cif for relapse\") matplot(pdta2$partial.time, t(pdta2$yhat), type = \"l\", lty = 1,         xlab = \"time\", ylab = \"age adjusted cif for death\")"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/varpro_feature_names.html","id":null,"dir":"Reference","previous_headings":"","what":"varpro one hot encodes features, so we need to get the ","title":"varpro one hot encodes features, so we need to get the ","text":"varpro one hot encodes features, need get \"raw\" original variable names. loops variable names original dataset, cuts one character end find variable name original data.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/varpro_feature_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"varpro one hot encodes features, so we need to get the ","text":"","code":"varpro_feature_names(varpro_names, dataset)"},{"path":"http://ehrlinger.github.io/ggRandomForests/reference/varpro_feature_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"varpro one hot encodes features, so we need to get the ","text":"varpro_names vector names output varpro analysis dataset dataset used varpro input.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v240","dir":"Changelog","previous_headings":"","what":"ggRandomForests v2.4.0","title":"ggRandomForests v2.4.0","text":"Updating latest ggplot2 functions Utilize namespace referencing Added pkgdown documentation Minor testing improvements","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v230","dir":"Changelog","previous_headings":"","what":"ggRandomForests v2.3.0","title":"ggRandomForests v2.3.0","text":"Knocking dust . Fix ROC curves Fix colors VIMP plot","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v221","dir":"Changelog","previous_headings":"","what":"ggRandomForests v2.2.1","title":"ggRandomForests v2.2.1","text":"CRAN release: 2022-09-01 Fix docs HTML5/Roxygen update","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v220","dir":"Changelog","previous_headings":"","what":"ggRandomForests v2.2.0","title":"ggRandomForests v2.2.0","text":"CRAN release: 2022-05-09 Bring back regression vignette Improve package tests code coverage Clean code lintr","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v210","dir":"Changelog","previous_headings":"","what":"ggRandomForests v2.1.0","title":"ggRandomForests v2.1.0","text":"CRAN release: 2022-04-26 pull archive randomForestSRC 3.1 build release. Fixed plot bug gg_error show actual curve (issue 35)","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v201","dir":"Changelog","previous_headings":"","what":"ggRandomForests v2.0.1","title":"ggRandomForests v2.0.1","text":"CRAN release: 2016-09-07 Correct bug survival plots predicting future data without known outcome. Vignettes now https://github.com/ehrlinger/ggRFVignette tests moved https://github.com/ehrlinger/ggRFVignette Begin work rewriting checks use cached data. require runtime, hence run fewer CRAN release. Minor bug documentation fixes.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v200","dir":"Changelog","previous_headings":"","what":"ggRandomForests v2.0.0","title":"ggRandomForests v2.0.0","text":"CRAN release: 2016-06-11 Added initial support randomForest package Updated cache files randomForestSRC 2.2.0 release. Remove regression vignettes meet CRAN size limits. remain available package source https://github.com/ehrlinger/ggRandomForests Minor bug documentation fixes.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v121","dir":"Changelog","previous_headings":"","what":"ggRandomForests v1.2.1","title":"ggRandomForests v1.2.1","text":"CRAN release: 2015-12-12 Update cached datasets randomForestSRC 2.0.0 release. Correct vignette formatting errors (thanks Joe Smith)","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v120","dir":"Changelog","previous_headings":"","what":"ggRandomForests v1.2.0","title":"ggRandomForests v1.2.0","text":"CRAN release: 2015-11-15 Convert semantic versioning http://semver.org/ Updates release ggplot2 2.0.0 Change reshape2::melt dependence tidyr::gather Optimize tests CRAN optimize R CMD CHECK times.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v114","dir":"Changelog","previous_headings":"","what":"ggRandomForests v1.1.4","title":"ggRandomForests v1.1.4","text":"CRAN release: 2015-03-29 combine.gg_partial bug giving single variable plot.variable object. Remove dplyr depends transitions “Imports” “Suggests”. Argument single outcome gg_vimp plot classification forests. Improvements gg_vimp arguments consistency. Add bootstrap confidence intervals gg_rfsrc function. Initial partial.rfsrc function replace randomForestSRC::plot.variable function. Move cache data randomForestSRC v1.6.1 take advantage rfsrc version checking function calls. Vignette updates JSS submission “ggRandomForests: Exploring Random Forest Survival”. Vignette updates arXiv submission ggRandomForests: Random Forests Regression optimizations reduce package size. Remove tests CRAN build optimise R CMD CHECK times. Remove pdf vignette figure CRAN build. Return S3method calls NAMESPACE “S3 methods exported registered” R V3.2+. Misc Bug Fixes.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v113","dir":"Changelog","previous_headings":"","what":"ggRandomForests v1.1.3","title":"ggRandomForests v1.1.3","text":"CRAN release: 2015-01-08 Update “ggRandomForests: Visually Exploring Random Forest Regression” vignette. development draft package vignette “Survival Random Forests”. Rename vignettes align randomForestSRC package usage. Add tests example functions. Refactor gg_ functions S3 methods allow future implementation random forest packages. Improved help files. Updated DESCRIPTION file remove redundant parts. Misc Bug Fixes.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v112","dir":"Changelog","previous_headings":"","what":"ggRandomForests v1.1.2","title":"ggRandomForests v1.1.2","text":"CRAN release: 2014-12-25 Add package vignette “ggRandomForests: Visually Exploring Random Forest Regression” Add gg_partial_coplot, quantile_cuts surface_matrix functions export calc_roc calc_auc functions. replace tidyr function dependency reshape2 (melt instead gather) due lazy eval issues. reduce dplyr dependencies (remove select %>% usage base equivalents, still use tbl_df printing) development package vignette “Survival Random Forests” Refactor cached example datasets better documentation, estimates examples. Improved help files. Updated DESCRIPTION file remove redundant parts. Misc Bug Fixes.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v111","dir":"Changelog","previous_headings":"","what":"ggRandomForests v1.1.1","title":"ggRandomForests v1.1.1","text":"CRAN release: 2014-12-13 Maintenance release, mostly fix gg_survival gg_partial plots. * Fix gg_survival functions plot kaplan-meier estimates. * Fix gg_partial functions categorical variables. * Add S3 print functions. * Try make gg_functions consistent. * development package vignette “Survival Random Forests” * Modify example cached datasets better estimates examples. * Improve help files. * Misc Bug Fixes.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v110","dir":"Changelog","previous_headings":"","what":"ggRandomForests v1.1.0","title":"ggRandomForests v1.1.0","text":"CRAN release: 2014-12-05 Add panel option gg_variable gg_partial Rework interactions plot add gg_coplot functions Imports instead depends Add version dependencies randomForestSRC Include package vignette “Random Forests Survival” Misc Bug Fixes","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v100","dir":"Changelog","previous_headings":"","what":"ggRandomForests v1.0.0","title":"ggRandomForests v1.0.0","text":"CRAN release: 2014-10-15 First CRAN release.","code":""},{"path":"http://ehrlinger.github.io/ggRandomForests/news/index.html","id":"ggrandomforests-v02","dir":"Changelog","previous_headings":"","what":"ggRandomForests v0.2","title":"ggRandomForests v0.2","text":"Initial useR!2014 release.","code":""}]
